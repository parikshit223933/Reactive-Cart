{"version":3,"sources":["CartItem.js","Cart.js","Navbar.js","App.js","index.js"],"names":["styles","image","height","width","borderRadius","backgroundColor","CartItem","props","product","price","title","qty","img","onIncreaseQuantity","onDecreaseQuantity","onDelete","className","style","alt","src","fontSize","color","onClick","Cart","products","map","key","id","Navbar","count","App","handleIncreaseQuantity","state","index_of_required_product","indexOf","db","collection","doc","update","then","console","log","catch","error","handleonDecreaseQuantity","window","alert","handleDeleteProduct","delete","getCartCount","forEach","getCartTotal","total","addProduct","add","NewDocRef","loading","firebase","this","orderBy","onSnapshot","snapshot","docs","data","setState","React","Component","firebaseConfig","apiKey","process","REACTIVE_CART_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","REACTIVE_CART_MESSAGING_SENDER_ID","appId","REACTIVE_CART_APP_ID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55ca31b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// class CartItem extends React.Component\r\n// {\r\n\r\n\r\n                    // constructor()\r\n                    // {\r\n                    //     super();\r\n                    //     this.state =\r\n                    //     {\r\n                    //         price: 999,\r\n                    //         title: 'Phone',\r\n                    //         qty: 1,\r\n                    //         img: ''\r\n                    //     }\r\n                    //     // this.increaseQuantity=this.increaseQuantity.bind(this);\r\n                    //     // this.testing();\r\n                    // } \r\n                    // /* testing=()=>\r\n                    // {\r\n                    //     // simulating an api call\r\n                    //     const promise = new Promise((resolve, reject) =>\r\n                    //     {\r\n                    //         setTimeout(function ()\r\n                    //         {\r\n                    //             resolve('done');\r\n\r\n                    //         }, 5000);\r\n                    //     });\r\n                    //     promise.then(() =>\r\n                    //     {\r\n                    //         // setstate acts like synchronous call\r\n                    //         this.setState({ qty: this.state.qty+10 });\r\n                    //         this.setState({ qty: this.state.qty+10 });\r\n                    //         this.setState({ qty: this.state.qty+10 });\r\n\r\n                    //         console.log('state', this.state);\r\n                    //     });\r\n                    // } */\r\n                    // increaseQuantity = () =>/* arrow functions bind the value of \"this\" of the function to the respective class. */\r\n                    // {\r\n                    //     // this.state.qty++;\r\n\r\n                    //     // set state form 1\r\n                    //     /* this.setState(\r\n                    //         {\r\n                    //             qty:this.state.qty+1\r\n                    //         }\r\n                    //     ) *//* in the form 1 as well we can pass the callback. */\r\n\r\n                    //     // set state form 2. it is used when the previous state is required.\r\n                    //     this.setState((previousState) =>\r\n                    //     {\r\n                    //         return {\r\n                    //             qty: previousState.qty + 1\r\n                    //         }\r\n                    //     }, () =>\r\n                    //     {\r\n                    //         console.log('state is changed', this.state);\r\n                    //     });\r\n                    // }\r\n                    // decreaseQuantity = () =>\r\n                    // {\r\n                    //     const { qty } = this.state;\r\n                    //     if (qty > 1)\r\n                    //         this.setState(\r\n                    //             {\r\n                    //                 qty: this.state.qty - 1\r\n                    //             }\r\n                    //         );\r\n                    //     else\r\n                    //         window.alert(\"You cant decrease the quantity below 1, if you want to delete the item, just click on the delete button!\");\r\n                    // }\r\n\r\n//     render()\r\n//     {\r\n//         const { price, title, qty } = this.props.product;\r\n//         const { onIncreaseQuantity, onDecreaseQuantity, product, onDelete } = this.props;\r\n//         return (\r\n//             <div className=\"cart-item\">\r\n//                 {this.props.jsX}\r\n//                 <div className=\"left-block\">\r\n//                     <img style={styles.image} alt=\"\" />\r\n//                 </div>\r\n//                 <div className=\"right-block\">\r\n//                     <div style={{ fontSize: 25 }}>\r\n//                         {title}\r\n//                     </div>\r\n//                     <div style={{ color: 'grey' }}>\r\n//                         Rs. {price}\r\n//                     </div>\r\n//                     <div style={{ color: 'grey' }}>\r\n//                         Quantity: {qty} {this.props.product.qty === 1 ? 'Unit' : 'Units'}\r\n//                     </div>\r\n//                     <div className=\"cart-item-actions\">\r\n//                         <button onClick={() => onDelete(product)}><i className=\"action-icons fas fa-trash-alt\" ></i></button>\r\n//                         <button onClick={() => onIncreaseQuantity(product)}><i className=\"action-icons fas fa-plus-square\" ></i></button>\r\n//                         <button onClick={() => onDecreaseQuantity(product)}><i className=\"action-icons fas fa-minus-square\"></i></button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// };\r\n\r\n\r\n\r\nconst CartItem = (props) => \r\n{\r\n    const { price, title, qty, img} = props.product;\r\n    const { onIncreaseQuantity, onDecreaseQuantity, product, onDelete } = props;\r\n    return (\r\n        <div className=\"cart-item\" style={{backgroundColor:'white'}}>\r\n            <div className=\"left-block\">\r\n                <img style={styles.image} alt=\"\" src={img} />\r\n            </div>\r\n            <div className=\"right-block\">\r\n                <div style={{ fontSize: 25 }}>\r\n                    {title}\r\n                </div>\r\n                <div style={{ color: 'grey' }}>\r\n                    Rs. {price}\r\n                </div>\r\n                <div style={{ color: 'grey' }}>\r\n                    Quantity: {qty} {props.product.qty === 1 ? 'Unit' : 'Units'}\r\n                </div>\r\n                <div className=\"cart-item-actions\">\r\n                    <button onClick={() => onDelete(product)}><i className=\"action-icons fas fa-trash-alt\" ></i></button>\r\n                    <button onClick={() => onIncreaseQuantity(product)}><i className=\"action-icons fas fa-plus-square\" ></i></button>\r\n                    <button onClick={() => onDecreaseQuantity(product)}><i className=\"action-icons fas fa-minus-square\"></i></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n/* our class CartItem will inherit features from the class React.Component. extends indicates\r\ninheritance in javascript */\r\nconst styles =\r\n{\r\n    image:\r\n    {\r\n        height: 110,\r\n        width: 110,\r\n        borderRadius: 4,\r\n        backgroundColor: 'orangered'\r\n    }\r\n}\r\nexport default CartItem;","import React from 'react';\r\nimport CartItem from './CartItem';\r\n\r\n\r\nconst Cart = (props) =>\r\n{\r\n    const { products } = props;\r\n    return (\r\n        <div className=\"cart\">\r\n            {products.map((product) =>\r\n            {\r\n                return (\r\n                    <CartItem\r\n                        product={product}\r\n                        key={product.id}\r\n                        onIncreaseQuantity={props.onIncreaseQuantity}\r\n                        onDecreaseQuantity={props.onDecreaseQuantity}\r\n                        onDelete={props.onDelete}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;","import React from 'react';\r\n\r\nconst Navbar = (props) =>\r\n{\r\n    return (\r\n        <div className='navbar' style={{ backgroundColor: 'black' }}>\r\n            <div style={{color:'#ff0072'}}>\r\n                <h1>Reactive Cart</h1>\r\n            </div>\r\n            {/* <div className=\"add-product-button\">\r\n                <button onClick={props.addProduct}>Add a Product</button>\r\n            </div> */}\r\n            <div className=\"cart-icon-container\">\r\n                <button>\r\n                    <i className=\"fas fa-shopping-cart\" style={{ color: 'white' }}></i>\r\n                    {props.count>0?(<span style={{ color: 'white' }}>{props.count}</span>):''}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\nimport Cart from './Cart';\nimport Navbar from './Navbar';\nimport * as firebase from 'firebase';\n\nclass App extends React.Component\n{\n    constructor()\n    {\n        super();\n        this.state = {\n            products: [],\n            loading: true\n        }\n        this.db = firebase.firestore();\n    }\n\n    componentDidMount()\n    {\n        // firebase\n        //     .firestore()\n        //     .collection('products')\n        //     .get()\n        //     .then((snapshot) =>\n        //     {\n        //         const products = snapshot.docs.map((doc) =>\n        //         {\n        //             const data=doc.data();\n        //             data['id']=doc.id;\n        //             return data;\n        //         })\n        //         this.setState({ \n        //            products,\n        //            loading:false\n        //         });\n        //     });\n        this.db\n            .collection('products')\n            // .where('price', '<', 20000)\n            // .where('qty', '==', 5)\n            .orderBy('price', 'desc')\n            .onSnapshot((snapshot) =>\n            {\n                /* this onsnapshot function is an event handler which is permanently attatched to the button.\n                now when ever the button is clicked, new product will be added to the database and it will be\n                shown to us synchronously in the front end. */\n                const products = snapshot.docs.map((doc) =>\n                {\n                    const data = doc.data();\n                    data['id'] = doc.id;\n                    return data;\n                })\n                this.setState({\n                    products,\n                    loading: false\n                });\n            });\n\n    }\n\n    handleIncreaseQuantity = (product) =>\n    {\n        const { products } = this.state;\n        const index_of_required_product = products.indexOf(product);\n\n        // products[index_of_required_product].qty += 1;\n\n        // this.setState({\n        //     products\n        // });\n        \n        const docRef=this.db.collection('products').doc(products[index_of_required_product].id);\n        docRef.update({\n            qty:products[index_of_required_product].qty+1\n        })\n        .then(()=>\n        {\n            console.log('Document updated successfully')\n        })\n        .catch((error)=>\n        {\n            if(error)\n            {\n                console.log('Error', error);\n            }\n        })\n    }\n\n\n\n    handleonDecreaseQuantity = (product) =>\n    {\n        const { products } = this.state;\n        const index_of_required_product = products.indexOf(product);\n\n        if (products[index_of_required_product].qty === 0)\n        {\n            window.alert(\"Quantity cant be negative!\")\n            return;\n        }\n\n        // products[index_of_required_product].qty -= 1;\n\n        // this.setState({\n        //     products\n        // })\n        const docRef=this.db.collection('products').doc(products[index_of_required_product].id);\n        docRef.update({\n            qty:products[index_of_required_product].qty-1\n        })\n        .then(()=>\n        {\n            console.log('Document Updated Successfully!');\n        })\n        .catch((error)=>\n        {\n            console.log('There was an error in updating the document', error);\n        })\n    }\n\n\n\n    handleDeleteProduct = (product) =>//We can also use filter to filter the array where the id is not eqaul to the target id (we would have passed the target id in the props and cartitem, would have returned it to us when we call the onDelete function.)\n    {\n        const { products } = this.state;\n        const index_of_required_product = products.indexOf(product);\n\n        // products.splice(index_of_required_product, 1);\n\n        // this.setState({\n        //     products\n        // });\n\n        const docRef=this.db.collection('products').doc(products[index_of_required_product].id);\n        docRef.delete()\n        .then(()=>\n        {\n            console.log('Document Deleted Successfully');\n        })\n        .catch((error)=>\n        {\n            console.log('Error in deleting the document!', error);\n        })\n    }\n\n\n\n    getCartCount = () =>\n    {\n        const { products } = this.state;\n\n        let count = 0;\n        products.forEach((product) =>\n        {\n            count += product.qty;\n        })\n        return count;\n    }\n\n\n    getCartTotal = () =>\n    {\n        const { products } = this.state;\n\n        let total = 0;\n        products.forEach((product) =>\n        {\n            total += product.qty * product.price;\n        });\n        return total;\n    }\n\n    addProduct = () =>\n    {\n        this.db\n            .collection('products')\n            .add({\n                img:'',\n                price:999,\n                qty:3,\n                title:'Washing Machine'\n            })\n            .then((NewDocRef)=>\n            {\n                console.log('Product has been added', NewDocRef);\n            })\n            .catch((error)=>\n            {\n                if(error)\n                {\n                    console.log('There was an error in getting data from db');\n                }\n            })\n    }\n\n    render()\n    {\n        const { products, loading } = this.state;\n        return (\n            <div className=\"App\">\n                <Navbar\n                    count={this.getCartCount()}\n                    addProduct={this.addProduct}\n                />\n\n                <Cart\n                    products={products}\n                    onIncreaseQuantity={this.handleIncreaseQuantity}\n                    onDecreaseQuantity={this.handleonDecreaseQuantity}\n                    onDelete={this.handleDeleteProduct}\n                />\n\n\n                {loading && <div className=\"loader\"></div>}\n\n\n                <div className=\"total-price-container\">\n                    <h3 className=\"total-price-heading\">\n                        Total: {this.getCartTotal()} <i>Rupees</i>\n                    </h3>\n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore'\n\nvar firebaseConfig = {\n    apiKey: process.env.REACTIVE_CART_API_KEY,///////////REACTIVE_CART_API_KEY\n    authDomain: \"reactive-cart.firebaseapp.com\",\n    databaseURL: \"https://reactive-cart.firebaseio.com\",\n    projectId: \"reactive-cart\",\n    storageBucket: \"reactive-cart.appspot.com\",\n    messagingSenderId: process.env.REACTIVE_CART_MESSAGING_SENDER_ID,/////////////REACTIVE_CART_MESSAGING_SENDER_ID\n    appId: process.env.REACTIVE_CART_APP_ID//////////REACTIVE_CART_APP_ID\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}